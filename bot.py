import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.utils import executor
import os

# ‡¶≤‡¶ó ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(level=logging.INFO)

# ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (Railway ‡¶è‡¶∞ Environment Variables ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶¨‡ßá)
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶Ø‡¶æ‡¶ö‡¶æ‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def contains_link(text):
    pattern = r"(https?://\S+|www\.\S+)"
    return re.search(pattern, text)

# ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ì ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®
@dp.message_handler(lambda message: message.text and contains_link(message.text))
async def delete_and_ban(message: types.Message):
    try:
        await message.delete()  # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
        await message.chat.kick(user_id=message.from_user.id)  # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®

        # ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®
        admin_msg = f"üö´ {message.from_user.full_name} ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶∏‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!"
        await message.chat.send_message(admin_msg)

    except Exception as e:
        print(f"Error: {e}")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

‚¨á
